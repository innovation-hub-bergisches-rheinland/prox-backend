plugins {
    id 'java'
    id "java-conventions"
    id "mapstruct-conventions"
    id "jib-conventions"
    id "release-conventions"
    id "spring-conventions"
    id "testcontainers-conventions"
}

group = 'de.innovationhub.prox'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    set('restassuredVersion', "5.3.0")
    set('springdocVersion', "2.0.2")
}

springBoot {
    buildInfo()
    mainClass = "de.innovationhub.prox.ProxApplication"
}

dependencies {
    implementation project(':modules:commons')
    implementation project(':modules:infra-keycloak')
    implementation project(':modules:infra-aws')

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    // implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation "org.flywaydb:flyway-core"

    // K8s
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config'

    // Springdoc / OpenAPI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${springdocVersion}"

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.instancio:instancio-junit:4.1.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation("io.rest-assured:rest-assured:${restassuredVersion}")
    testImplementation("io.rest-assured:json-path:${restassuredVersion}")
    testImplementation("io.rest-assured:spring-mock-mvc:${restassuredVersion}")
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'io.github.artsok:rerunner-jupiter:2.1.6'
    testRuntimeOnly 'com.h2database:h2'

    modules {
        module("org.codehaus.groovy:groovy") {
            replacedBy("org.apache.groovy:groovy", "conflicts in current rest-assured version")
        }
        module("org.codehaus.groovy:groovy-xml") {
            replacedBy("org.apache.groovy:groovy-xml", "conflicts in current rest-assured version")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jib {
    to {
        // Adding the specific project version to tags. I don't know how to access it
        // from the convention
        tags += [project.version]
    }
}